---
- name: Tao VM moi tu template
  hosts: localhost
  gather_facts: false

  vars_files: 
  - vars/vars.yaml 

  vars:
    controller:
      host: '{{ lookup("env", "CONTROLLER_HOST") }}'
      username: '{{ lookup("env", "CONTROLLER_USERNAME") }}'
      password: '{{ lookup("env", "CONTROLLER_PASSWORD") }}'

  tasks:
   
    - name: 1. Kiem tra xem VM da co' tren vCenter chua
      vmware.vmware_rest.vcenter_vm_info:       
        filter_names:
          - "{{ new_vm_name }}"
      register: check_vm_result

    - name: 2. Neu VM da ton tai thi terminate playbook
      fail:
        msg: "{{ new_vm_name }} da ton tai trong vCenter"
      when: check_vm_result.value | length >= 1

    - name: 3. Tao new VM dua tren vm-template trong Library 
      when: lib_item_type == "vm-template"
      register: new_vm_from_template
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
        name: "{{ new_vm_name }}"
        library: '{{ lib_id }}'
        template_library_item: '{{ lib_item_id }}'
        state: deploy
        powered_on: yes                  
        guest_customization:
          name: "{{ customization_spec_name }}"                
        placement:
          cluster: "{{ lookup('vmware.vmware_rest.cluster_moid', cluster_name) }}"
          folder: "{{ lookup('vmware.vmware_rest.folder_moid', folder_name) }}"
          resource_pool: "{{ lookup('vmware.vmware_rest.resource_pool_moid', resource_pool_name) }}"  

    - name: Collect a list of the NIC for a given VM
      vmware.vmware_rest.vcenter_vm_hardware_ethernet_info:
        vm: '{{ new_vm_from_template.value }}'
      register: vm_nic

    - name: Turn the NIC's start_connected flag on
      vmware.vmware_rest.vcenter_vm_hardware_ethernet:
        nic: '4000'
        start_connected: true
        state: connect
        vm: '{{ new_vm_from_template.value }}'

    - name: 4. Wait until my VM is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vm: '{{ new_vm_from_template.value }}'
      register: vm_tools_info
      until:
      - vm_tools_info is not failed
      - vm_tools_info.value.run_state == "RUNNING"
      retries: 60
      delay: 5

    - name: 5. Add host to inventory 
      ansible.controller.host:
        controller_password: "{{ controller.password }}"
        controller_username: "{{ controller.username }}"
        controller_host: "{{ controller.host }}"
        name: "{{ host_name }}"
        description: "Generated by Ansible"
        enabled: yes
        inventory: "{{ aap_project_inventory }}"
        state: present
        variables:
          ansible_host: "{{ ip_address }}"   
          
  

    # - name: 4.1 set fact cho new_vm_id
    #   set_fact:
    #     new_vm_id: '{{ (lib_item_type == "vm-template") | ternary(new_vm_from_template.value, new_vm_from_ovf.value.resource_id.id) }}' 

    # - name: 5. ID cua VM la {{ new_vm_id }}  
    #   set_stats:
    #     data: 
    #       new_vm: '{{ new_vm_id }}'
    #       vm_portgroup: '{{ vm_portgroup }}'

    # - name: 3. Get the dvswitch called {{ my_portgroup }}
    #   vmware.vmware_rest.vcenter_network_info:
    #     filter_types: DISTRIBUTED_PORTGROUP
    #     filter_names: '{{ my_portgroup }}'
    #   register: vm_portgroup     

    # - name: 4. Tao VM tu OVF trong Content Library
    #   when: lib_item_type == "ovf"
    #   register: new_vm_from_ovf
    #   vmware.vmware_rest.vcenter_ovf_libraryitem:
    #     session_timeout: 2900
    #     ovf_library_item_id: "{{ lib_item_id }}" #'{{ (lib_items.value|selectattr("name", "equalto", "my_vm")|first).id }}'
    #     state: deploy
    #     target:
    #       resource_pool_id: "{{ lookup('vmware.vmware_rest.resource_pool_moid', resource_pool_name) }}"
    #       folder_id: "{{ lookup('vmware.vmware_rest.folder_moid', '/RHLABS/vm/Thanh') }}"
    #     deployment_spec:
    #       name: "{{ new_vm_name }}"
    #       accept_all_EULA: true
    #       storage_provisioning: thin
    #       network_mappings:
    #          id: 1
    #          name: '{{ vm_portgroup.value[0].network }}'

    
    # - name: 5. Lay thong tin network cua VM
    #   vmware.vmware_rest.vcenter_vm_guest_networking_info:
    #     vm: '{{ new_vm_from_template.value }}'

    # - name: 6. Lay thong tin cua VM
    #   vmware.vmware_rest.vcenter_vm_info:
    #     vm: '{{ new_vm_from_template.value }}'
    #   register: new_vm_info
    
   